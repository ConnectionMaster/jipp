{%- if not noheader -%}
// Copyright 2018 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by {{ app }}. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on {{ updated }}
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports
{%-  if collection.extras%}
import com.hp.jipp.encoding.AttributeGroup.Companion.groupOf
{%-  endif %}
{%- endif %}
{%- if obverse %}
 {% set reversed=False %}
{%- else %}
 {% set reversed=True %}
{%- endif %}
/**
 * Data object corresponding to a "{{ collection.name }}" collection{%- if collection.specs %} as defined in:{%- for spec in collection.specs | sort %}
 * [{{ spec | upper }}]({{ specs[spec] }}){{ "," if not loop.last }}{%- endfor %}{%- else %}{%- endif %}.{%- if collection['refs']%}
 *
 * Also used by:{%- for ref in collection['refs'] | sort %}
 *   * `{{ ref }}`{%- endfor%}{%- endif %}
 */
@Suppress("RedundantCompanionReference", "unused")
data class {{ collection.name | camel_class }}
constructor(
{%- for name, member in collection.members | dictsort(reverse=reversed) %}
{%- if member.kdoc %}
    /** {{ member.kdoc }} */
{%- endif %}
    var {{ name | camel_member }}: {%- if member.set %} List<{{ member.ktype }}>{% else %} {{ member.ktype }}{% endif %}? = null,
{%- endfor %}
{%- if collection.extras %}
    /** Additional attributes (see specification for valid values). */
    var extras: AttributeGroup = groupOf(Tag.{{ collection.extras }}),
{%- endif %}
) : AttributeCollection {

    /** Construct an empty [{{ collection.name | camel_class }}]. */
    constructor() : this({%- if collection.members %}null{%- endif %})

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>>
        get() = listOfNotNull(
{%- for name, member in collection.members | dictsort(reverse=reversed) %}
            {{ name | camel_member }}?.let { {{ collection.name | camel_class }}.{{ name | camel_member }}.of(it{%- if member.set and member.kbase %}.map { v -> {{ member.kbase }}(v) }{%- endif %}) },
{%- endfor %}
        ) {%- if collection.extras %} + extras {%- endif %}

    /** Defines types for each member of [{{ collection.name | camel_class }}]. */
    companion object : AttributeCollection.Converter<{{ collection.name | camel_class }}> {
        override fun convert(attributes: List<Attribute<*>>): {{ collection.name | camel_class }} =
            {{ collection.name | camel_class }}(
{%- for name, member in collection.members | dictsort(reverse=reversed) %}
 {%- if member.set %}
                extractAll(attributes, {{ name | camel_member }})
  {%- if member.ktype_accessor %}?.map { it.{{ member.ktype_accessor }} }{%- endif %},
 {%- else %}
                extractOne(attributes, {{ name | camel_member }})
  {%- if member.ktype_accessor %}?.{{ member.ktype_accessor }}{%- endif %},
 {%- endif %}
{%- endfor %}
{%- if collection.extras %}
                groupOf(
                    Tag.{{ collection.extras }},
                    attributes{%- if collection.members %}.filterNot {
                        {%- for name, member in collection.members | dictsort(reverse=reversed) %} it.name == {{ name | camel_member }}.name{{ " ||" if not loop.last }}{%- endfor %} }{%- endif %}
                ),
{%- endif %}
            )
        override val cls = {{ collection.name | camel_class }}::class.java
        @Deprecated("Remove this symbol")
        @JvmField val Types = this
        {%- for name, member in collection.members | dictsort(reverse=reversed) %}
        {%- if member.syntax == 'enum' %}
        /**
         * "{{ member.name }}" member type. {%- if member.kdoc %}
         * {{ member.kdoc }}{%- endif %}
         */
        {%- endif %}
        @JvmField val {{ member.name | camel_member }} = {{ member.kintro }}"{{ member.name }}"{{ member.koutro }})
        {%- endfor %}
    }

{%- for name, member in collection.members | dictsort(reverse=reversed) %}{%- if member.kimpl %}

{{ member.kimpl }}{%- endif %}{%- endfor %}
    override fun toString() = "{{ collection.name | camel_class }}(${attributes.joinToString()})"
}

