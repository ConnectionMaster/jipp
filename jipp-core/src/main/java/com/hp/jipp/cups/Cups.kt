// Â© Copyright 2020 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genCupsTypes.py.
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.cups

import com.hp.jipp.encoding.* // ktlint-disable
import com.hp.jipp.model.Operation

/**
 * Operations and Types as defined at https://www.cups.org/doc/spec-ipp.html.
 */
@Suppress("unused", "MagicNumber", "ObjectPropertyNaming")
object Cups {
    object Operation {
        /** Get the default destination. */
        @JvmField val cupsGetDefault = Operation(0x4001, "CUPS-Get-Default")
        /** Get all of the available printers. */
        @JvmField val cupsGetPrinters = Operation(0x4002, "CUPS-Get-Printers")
        /** Add or modify a printer. */
        @JvmField val cupsAddModifyPrinter = Operation(0x4003, "CUPS-Add-Modify-Printer")
        /** Delete a printer. */
        @JvmField val cupsDeletePrinter = Operation(0x4004, "CUPS-Delete-Printer")
        /** Get all of the available printer classes. */
        @JvmField val cupsGetClasses = Operation(0x4005, "CUPS-Get-Classes")
        /** Add or modify a printer class. */
        @JvmField val cupsAddModifyClass = Operation(0x4006, "CUPS-Add-Modify-Class")
        /** Delete a printer class. */
        @JvmField val cupsDeleteClass = Operation(0x4007, "CUPS-Delete-Class")
        /** Set the default destination. */
        @JvmField val cupsSetDefault = Operation(0x400A, "CUPS-Set-Default")
        /** Move a job to a different printer. */
        @JvmField val cupsMoveJob = Operation(0x400D, "CUPS-Move-Job")
        /** Authenticate a job for printing. */
        @JvmField val cupsAuthenticateJob = Operation(0x400E, "CUPS-Authenticate-Job")
        /** Get a document file from a job. */
        @JvmField val cupsGetDocument = Operation(0x4027, "CUPS-Get-Document")
    }

    object Types {
        @JvmField val authInfo = TextType.Set("auth-info")
        /** See [AuthInfoRequired] for values. */
        @JvmField val authInfoRequired = KeywordType.Set("auth-info-required")
        @JvmField val deviceUri = UriType("device-uri")
        @JvmField val jobKLimit = IntType("job-k-limit")
        @JvmField val jobMediaProgress = IntType("job-media-progress")
        @JvmField val jobOriginatingHostName = NameType("job-originating-host-name")
        @JvmField val jobPageLimit = IntType("job-page-limit")
        @JvmField val jobPrinterStateMessage = TextType("job-printer-state-message")
        @JvmField val jobPrinterStateReasons = KeywordType.Set("job-printer-state-reasons")
        @JvmField val jobQuotaPeriod = IntType("job-quota-period")
        @JvmField val markerChangeTime = IntType("marker-change-time")
        @JvmField val markerColors = NameType.Set("marker-colors")
        @JvmField val markerHighLevels = IntType.Set("marker-high-levels")
        @JvmField val markerLevels = IntType.Set("marker-levels")
        @JvmField val markerLowLevels = IntType.Set("marker-low-levels")
        @JvmField val markerMessage = TextType("marker-message")
        @JvmField val markerNames = NameType.Set("marker-names")
        /** See [MarkerTypes] for values. */
        @JvmField val markerTypes = KeywordType.Set("marker-types")
        @JvmField val memberNames = NameType.Set("member-names")
        @JvmField val memberUris = UriType.Set("member-uris")
        /** See [PageBorder] for values. */
        @JvmField val pageBorder = KeywordType("page-border")
        @JvmField val printerId = IntType("printer-id")
        @JvmField val printerType = BitfieldType("printer-type")
        @JvmField val printerTypeMask = BitfieldType("printer-type-mask")
        @JvmField val requestingUserNameAllowed = NameType.Set("requesting-user-name-allowed")
        @JvmField val requestingUserNameDenied = NameType.Set("requesting-user-name-denied")
    }
    object AuthInfoRequired {
        /** A domain name is required. */
        const val domain = "domain"
        /** Kerberos is required - this keyword can only appear by itself and causes cupsd to collect the UID of the printing user. */
        const val negotiate = "negotiate"
        /** No authentication is required - this keyword can only appear by itself. */
        const val none = "none"
        /** A password is required. */
        const val password = "password"
        /** A username is required. Some protocols (like SMB) prefix the username with the domain, for example "DOMAIN\user". */
        const val username = "username"
    }
    object MarkerTypes {
        const val toner = "toner"
        const val wasteToner = "waste-toner"
        const val ink = "ink"
        const val inkCartridge = "ink-cartridge"
        const val inkRibbon = "ink-ribbon"
        const val wasteInk = "waste-ink"
        const val opc = "opc"
        const val developer = "developer"
        const val fuserOil = "fuser-oil"
        const val solidWax = "solid-wax"
        const val ribbonWax = "ribbon-wax"
        const val wasteWax = "waste-wax"
        const val fuser = "fuser"
        const val coronaWire = "corona-wire"
        const val fuserOilWick = "fuser-oil-wick"
        const val cleanerUnit = "cleaner-unit"
        const val fuserCleaningPad = "fuser-cleaning-pad"
        const val transferUnit = "transfer-unit"
        const val tonerCartridge = "toner-cartridge"
        const val fuserOiler = "fuser-oiler"
        const val water = "water"
        const val wasteWater = "waste-water"
        const val bindingSupply = "binding-supply"
        const val bandingSupply = "banding-supply"
        const val stichingWire = "stiching-wire"
        const val shrinkWrap = "shrink-wrap"
        const val paperWrap = "paper-wrap"
        const val staples = "staples"
        const val inserts = "inserts"
        const val covers = "covers"
    }
    object NotifyEvents {
        /** Get notified whenever a printer or class is added */
        const val printerAdded = "printer-added"
        /** Get notified whenever a printer or class is deleted */
        const val printerDeleted = "printer-deleted"
        /** Get notified whenever a printer or class is modified */
        const val printerModified = "printer-modified"
        /** Get notified when a security condition occurs */
        const val serverAudit = "server-audit"
        /** Get notified when the server is restarted */
        const val serverRestarted = "server-restarted"
        /** Get notified when the server is started */
        const val serverStarted = "server-started"
        /** Get notified when the server is stopped */
        const val serverStopped = "server-stopped"
    }
    object PageBorder {
        /** Two hairline borders are drawn */
        const val _double = "double"
        /** Two 1pt borders are drawn */
        const val doubleThick = "double-thick"
        /** No border is drawn (default) */
        const val none = "none"
        /** A single hairline border is drawn */
        const val single = "single"
        /** A single 1pt border is drawn */
        const val singleThick = "single-thick"
    }
}
