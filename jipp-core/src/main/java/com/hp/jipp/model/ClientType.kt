// Copyright 2023 - 2024 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2024-10-09
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable
import com.hp.jipp.encoding.Enum // Override java Enum

/**
 * "client-type" enum as defined in:
 * [PWG5100.7](https://ftp.pwg.org/pub/pwg/candidates/cs-ippjobext21-20230210-5100.7.pdf).
 */
data class ClientType(override val code: Int, override val name: String) : Enum() {

    override fun toString() = super.toString()

    /** An [AttributeType] for a [ClientType] attribute. */
    class Type(name: String) : EnumType<ClientType>(name, { get(it) })

    /** An [AttributeType] for multiple [ClientType] attributes. */
    class SetType(name: String) : EnumType.Set<ClientType>(name, { get(it) })

    object Code {
        const val application = 3
        const val operatingSystem = 4
        const val driver = 5
        const val other = 6
    }

    companion object {
        @JvmField val application = ClientType(Code.application, "application")
        @JvmField val operatingSystem = ClientType(Code.operatingSystem, "operating-system")
        @JvmField val driver = ClientType(Code.driver, "driver")
        @JvmField val other = ClientType(Code.other, "other")

        @JvmField val all = listOf(
            application,
            operatingSystem,
            driver,
            other,
        ).map { it.code to it }.toMap()

        operator fun get(value: Int): ClientType =
            all[value] ?: ClientType(value, "???")
    }
}
