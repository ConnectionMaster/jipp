// Copyright 2018 - 2025 HP Development Company, L.P.
// SPDX-License-Identifier: MIT
//
// DO NOT MODIFY. Code is auto-generated by genTypes.py. Content taken from registry at
// https://www.iana.org/assignments/ipp-registrations/ipp-registrations.xml, updated on 2025-05-13
@file:Suppress("MaxLineLength", "WildcardImport")

package com.hp.jipp.model

import com.hp.jipp.encoding.* // ktlint-disable no-wildcard-imports

/**
 * Data object corresponding to a "printer-xri-supported" collection as defined in:
 * [RFC3380](http://www.iana.org/go/rfc3380).
 */
@Suppress("RedundantCompanionReference", "unused")
data class PrinterXriSupported
constructor(
    /** May contain any keyword from [XriAuthenticationSupported]. */
    var xriAuthentication: String? = null,
    /** May contain any keyword from [XriSecuritySupported]. */
    var xriSecurity: String? = null,
    var xriUri: java.net.URI? = null,
) : AttributeCollection {

    /** Construct an empty [PrinterXriSupported]. */
    constructor() : this(null)

    /** Produce an attribute list from members. */
    override val attributes: List<Attribute<*>>
        get() = listOfNotNull(
            xriAuthentication?.let { PrinterXriSupported.xriAuthentication.of(it) },
            xriSecurity?.let { PrinterXriSupported.xriSecurity.of(it) },
            xriUri?.let { PrinterXriSupported.xriUri.of(it) },
        )

    /** Defines types for each member of [PrinterXriSupported]. */
    companion object : AttributeCollection.Converter<PrinterXriSupported> {
        override fun convert(attributes: List<Attribute<*>>): PrinterXriSupported =
            PrinterXriSupported(
                extractOne(attributes, xriAuthentication),
                extractOne(attributes, xriSecurity),
                extractOne(attributes, xriUri),
            )
        override val cls = PrinterXriSupported::class.java
        @Deprecated("Remove this symbol")
        @JvmField val Types = this
        @JvmField val xriAuthentication = KeywordType("xri-authentication")
        @JvmField val xriSecurity = KeywordType("xri-security")
        @JvmField val xriUri = UriType("xri-uri")
    }
    override fun toString() = "PrinterXriSupported(${attributes.joinToString()})"
}
