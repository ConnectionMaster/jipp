apply plugin: 'kotlin'
apply plugin: 'java-library'
apply plugin: 'jacoco'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'maven-publish'
apply plugin: 'signing'

dependencies {
    api project(path: ':jipp-core')
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
}

compileKotlin {
    kotlinOptions {
        allWarningsAsErrors = true
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        allWarningsAsErrors = true
        jvmTarget = "1.8"
    }
}

ktlint {
    version = "$ktlint_version"
}

afterEvaluate {
    check.dependsOn ktlintCheck
}

test.finalizedBy jacocoTestReport

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    reports {
        xml.required = true // coveralls plugin depends on xml format report
        html.outputLocation = layout.buildDirectory.dir('reports/jacocoHtml')
    }

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/AutoValue_**'])
        }))
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.name

            pom {
                name = project.name
                description = 'PWG-Raster and PCLm conversions'
                url = 'https://github.com/hpinc/jipp'
                organization {
                    name = 'HP Development Company, L.P.'
                    url = 'https://github.com/HPInc'
                }
                issueManagement {
                    system = 'GitHub'
                    url = 'https://github.com/HPInc/jipp/issues'
                }
                licenses {
                    license {
                        name ='MIT'
                        url ='https://github.com/HPInc/jipp/blob/master/LICENSE.md'
                        distribution ='repo'
                    }
                }
                scm {
                    url = 'https://github.com/HPInc/jipp'
                    connection = 'scm:git:git://github.com/HPInc/jipp.git'
                    developerConnection = 'scm:git:ssh://git@github.com:HPInc/jipp.git'
                }
                developers {
                    developer {
                        name = 'Glade Diviney'
                        email = 'glade.diviney@hp.com'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url = "https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/"
            credentials {
                username = project.ext.properties.sonatypeUsername
                password = project.ext.properties.sonatypePassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

task notifySonatype {
    doLast {
        def url = "https://ossrh-staging-api.central.sonatype.com/manual/upload/defaultRepository/com.hp.jipp" +
                "?publishing_type=user_managed"
        def conn = new URL(url).openConnection() as HttpURLConnection
        def creds = "${project.ext.properties.sonatypeUsername}:${project.ext.properties.sonatypePassword}"
        def token = Base64.encoder.encodeToString(creds.bytes)

        conn.requestMethod = "POST"
        conn.setRequestProperty("Content-Type", "application/json")
        conn.setRequestProperty("Authorization", "Bearer $token")

        if (conn.responseCode != 200) {
            throw new IOException("Failed to upload to OSSRH. Response code: ${conn.responseCode}, message: ${conn.responseMessage}")
        }
    }
}

// Post notification once for both pdl and core artifacts
publish.finalizedBy(notifySonatype)
